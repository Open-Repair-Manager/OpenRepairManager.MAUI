@page "/FirstRun"
@using System.Diagnostics
@using Microsoft.Maui.Storage
@using OpenRepairManager.MAUI.Components.Layout
@using OpenRepairManager.MAUI.Services

<div class="mb-3">
    <label for="ApiUrl" class="form-label">API Address</label>
    <input @bind="apiUrl" class="form-control" id="ApiUrl" placeholder="https://your.address/api/" type="text" />
</div>

<div class="mb-3">
    <label for="ApiToken" class="form-label">API Key</label>
    <input @bind="@apiKey" placeholder="ORM-XXXXXXXX" id="ApiToken" class="form-control" type="text" />
</div>

<div class="mb-3">
    <button @onclick="Submit" type="submit" class="btn btn-primary">Submit</button>
    <h2 class="text-danger">@error</h2>
</div>


<script type="text/javascript">
    document.getElementById("setupTitle").innerHTML = "API Setup";
</script>

@code {
    string apiKey;
    string apiUrl;

    string error;
    
    protected override async Task OnInitializedAsync()
    {
        apiKey = Preferences.Default.Get("ApiKey", "");
        apiUrl = Preferences.Default.Get("ApiUrl", "");
    }
    
    public static async Task<bool> AreSettingsValidAsync(string apiKey, string apiUrl)
    {
        Debug.WriteLine(apiUrl);
        if (Connectivity.Current.NetworkAccess != NetworkAccess.Internet)
            return false;

        try
        {
            
            HttpClient testClient = new HttpClient()
            {
                BaseAddress = new Uri(apiUrl),
                DefaultRequestHeaders =
                {
                    //test API Key - localhost db only - Store in environment variable later
                    { "ApiKey", apiKey }
                }
            };
            try
            {
                var response = await testClient.GetAsync($"Sessions?count=0&orderBy=asc");
                return response.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }
        catch
        {
            return false;
        }
    }
    
    private async Task Submit()
    {
        Debug.WriteLine(apiUrl);
        bool result = await AreSettingsValidAsync(apiKey, apiUrl);
        if (result)
        {
            Preferences.Default.Set("ApiKey", apiKey);
            Preferences.Default.Set("ApiUrl", apiUrl);

            NavManager.NavigateTo("/");
        }
        else
        {
            error = "Invalid settings";
        }
        
        Debug.WriteLine(result);
        try
        {
            
        }
        catch (Exception e)
        {
            error = e.Message;
        }

        
    }
}